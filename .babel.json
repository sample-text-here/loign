{
  "{\"filename\":\"/app/server.js\",\"env\":{},\"retainLines\":false,\"highlightCode\":true,\"suppressDeprecationMessages\":false,\"presets\":[],\"plugins\":[],\"ignore\":[],\"code\":true,\"metadata\":true,\"ast\":true,\"comments\":true,\"compact\":\"auto\",\"minified\":false,\"sourceRoot\":\"/app\",\"babelrc\":true,\"sourceType\":\"module\",\"moduleIds\":false,\"passPerPreset\":false,\"parserOpts\":false,\"generatorOpts\":false}:6.26.3": {
    "metadata": {
      "usedHelpers": [],
      "marked": [],
      "modules": {
        "imports": [],
        "exports": {
          "exported": [],
          "specifiers": []
        }
      }
    },
    "options": {
      "filename": "/app/server.js",
      "filenameRelative": "/app/server.js",
      "env": {},
      "retainLines": false,
      "highlightCode": true,
      "suppressDeprecationMessages": false,
      "presets": [],
      "plugins": [],
      "ignore": [],
      "code": true,
      "metadata": true,
      "ast": false,
      "comments": true,
      "compact": "auto",
      "minified": false,
      "sourceMaps": "both",
      "sourceMapTarget": "server.js",
      "sourceFileName": "server.js",
      "sourceRoot": "/app",
      "babelrc": false,
      "sourceType": "module",
      "moduleRoot": "/app",
      "moduleIds": false,
      "passPerPreset": false,
      "parserOpts": false,
      "generatorOpts": false,
      "basename": "server"
    },
    "ignored": false,
    "code": "// server.js\n// where your node app starts\n\n// init project\nconst express = require(\"express\");\nconst bodyParser = require(\"body-parser\");\nconst Cookies = require(\"cookie-parser\");\nconst favicon = require(\"express-favicon\");\nconst app = express();\nconst fs = require(\"fs\");\napp.use(bodyParser.urlencoded({ extended: true }));\napp.use(bodyParser.json());\n\nconst allowWrite = true;\nconst allowReset = false;\n\n// we've started you off with Express,\n// but feel free to use whatever libs or frameworks you'd like through `package.json`.\n\n// http://expressjs.com/en/starter/static-files.html\napp.use(express.static(\"public\"));\napp.use(favicon(`${__dirname}/public/favicon.ico`));\napp.use(Cookies());\n\n// init sqlite db\nconst dbFile = \"./.data/sqlite.db\";\nconst exists = fs.existsSync(dbFile);\nconst sqlite3 = require(\"sqlite3\").verbose();\nconst db = new sqlite3.Database(dbFile);\n\n// if ./.data/sqlite.db does not exist, create it, otherwise print records to console\ndb.serialize(() => {\n  if (!exists) {\n    db.run(\"DROP TABLE IF EXISTS Users\");\n    db.run(\"DROP TABLE IF EXISTS Posts\");\n    db.run(\"CREATE TABLE Users (id INTEGER PRIMARY KEY AUTOINCREMENT, username TEXT, password Text, joined TEXT, status TEXT, like TEXT, bad TEXT, profilepic BLOB)\");\n    db.run(\"CREATE TABLE Posts (id INTEGER PRIMARY KEY AUTOINCREMENT, title TEXT, post Text, by TEXT, date TEXT, tag TEXT, votes INTEGER, comments TEXT)\");\n    db.run(\"CREATE TABLE Sessions (id INTEGER PRIMARY KEY AUTOINCREMENT, key TEXT expires TEXT)\");\n    console.log(\"it is done\");\n  }\n});\n\n// http://expressjs.com/en/starter/basic-routing.html\napp.get(\"/\", (req, res) => {\n  res.sendFile(`${__dirname}/views/index.html`);\n});\n\n// http://expressjs.com/en/starter/basic-routing.html\napp.get(\"/test\", (req, res) => {\n  db.run(\"ALTER TABLE Users ADD profilepic BLOB\");\n  res.sendFile(`${__dirname}/views/test.html`);\n});\n\napp.get(\"/signup\", (req, res) => {\n  res.sendFile(`${__dirname}/views/signup.html`);\n});\n\n// http://expressjs.com/en/starter/basic-routing.html\napp.get(\"/login\", (req, res) => {\n  res.sendFile(`${__dirname}/views/login.html`);\n});\n\napp.get(\"/edit\", (req, res) => {\n  res.sendFile(`${__dirname}/views/edit.html`);\n});\n\napp.get(\"/t/card\", (req, res) => {\n  res.sendFile(`${__dirname}/templates/card.html`);\n});\n\napp.get(\"/t/comment\", (req, res) => {\n  res.sendFile(`${__dirname}/templates/comment.html`);\n});\n\napp.get(\"/user\", (req, res) => {\n  var data = req.cookies;\n  if (data.user) {\n    db.get(\"SELECT status, joined, like, bad FROM Users WHERE username=?\", [data.user], (err, row) => {\n      if (!err) {\n        if (row) {\n          data.status = row.status;\n          data.like = row.like;\n          data.bad = row.bad;\n        }\n        if (data.like == null) {\n          data.like = \"[]\";\n        }\n        if (data.bad == null) {\n          data.bad = \"[]\";\n        }\n        res.send(data);\n      }\n    });\n  } else res.send({});\n});\n\napp.get(\"/logout\", (req, res) => {\n  res.clearCookie(\"user\").send({ message: \"success\" });\n});\n\napp.get(\"/post\", (req, res) => {\n  res.sendFile(`${__dirname}/views/new.html`);\n});\n\napp.get(\"/@:user\", (req, res) => {\n  res.sendFile(`${__dirname}/views/user.html`);\n});\n\napp.get(\"/~:sub\", (req, res) => {\n  res.sendFile(`${__dirname}/views/sub.html`);\n});\n\napp.get(\"/-:post\", (req, res) => {\n  res.sendFile(`${__dirname}/views/post.html`);\n});\n\napp.get(\"/get/users/:user\", (req, res) => {\n  var data = {};\n  data.user = req.params.user;\n  db.get(\"SELECT status, joined FROM Users WHERE username=?\", [data.user], (err, row) => {\n    if (!err) {\n      if (row) {\n        data.status = row.status;\n        data.joined = row.joined;\n      }\n      res.send(data);\n    }\n  });\n});\n\napp.get(\"/get/users/\", (req, res) => {\n  db.all(\"SELECT username, status, joined FROM Users\", [], (err, row) => {\n    if (!err) {\n      if (row) {\n        res.send(row);\n      }\n    }\n  });\n});\n\napp.get(\"/get/posts/:sub\", (req, res) => {\n  var limit = req.query.limit;\n  var offset = req.query.offset;\n  var user = req.query.user;\n  if (!limit) {\n    limit = 10;\n  }\n  if (!offset) {\n    offset = 0;\n  }\n  if (!user) {\n    user = \"%\";\n  }\n  var data = {};\n  data.sub = req.params.sub;\n  db.all(\"SELECT * FROM Posts WHERE (tag=? AND by LIKE ?) ORDER BY id DESC LIMIT ? OFFSET ?\", [data.sub, user, limit, offset], (err, row) => {\n    if (!err) {\n      if (row) {\n        res.send(row);\n      }\n    }\n  });\n});\n\napp.get(\"/get/posts/\", (req, res) => {\n  var limit = req.query.limit;\n  var offset = req.query.offset;\n  var user = req.query.user;\n  if (!limit) {\n    limit = 10;\n  }\n  if (!offset) {\n    offset = 0;\n  }\n  if (!user) {\n    user = \"%\";\n  }\n  db.all(\"SELECT * FROM Posts WHERE (by LIKE ?) ORDER BY id DESC LIMIT ? OFFSET ?\", [user, limit, offset], (err, row) => {\n    if (!err) {\n      res.send(row);\n    }\n  });\n});\napp.get(\"/get/post/:id\", (req, res) => {\n  db.get(\"SELECT * FROM Posts WHERE id=?\", [req.params.id], (err, row) => {\n    if (!err) {\n      res.send(row);\n    }\n  });\n});\n\napp.post(\"/post/submitPost\", (req, res) => {\n  console.log(`Submit new post ${req.body.title}`);\n  if (allowWrite) {\n    if (!req.cookies.posted) {\n      const title = req.body.title;\n      const post = req.body.post;\n      const tag = req.body.tag;\n      const date = new Date();\n      const by = req.cookies.user;\n      if (by) {\n        db.run(`INSERT INTO Posts (title, post, by, date, tag) VALUES (?,?,?,?,?)`, [title, post, by, date, tag], err => {\n          if (err) {\n            console.log(err);\n            console.log(\"error!\");\n            res.send({\n              message: \"Something happened, please try again\",\n              error: true\n            });\n          } else {\n            console.log(\"success\");\n            res.cookie(\"posted\", true, { maxAge: 60000 }).send({ message: \"success\", error: false });\n          }\n        });\n      } else {\n        res.send({ message: \"No user!\", error: true });\n      }\n    } else {\n      res.send({ message: \"Too many posts!\", error: true });\n    }\n  }\n});\n\napp.post(\"/post/comment\", (req, res) => {\n  var data = {\n    comment: req.body.comment,\n    id: req.body.id,\n    by: req.cookies.user,\n    date: new Date()\n  };\n  if (req.cookies.user && allowWrite) {\n    db.get(\"SELECT (comments) FROM Posts WHERE id=?\", [data.id], (err, row) => {\n      if (!err) {\n        console.log(row);\n        if (row.comments == null) {\n          console.log(\"first\");\n          db.run(\"UPDATE Posts SET comments=? WHERE id=?\", [\"[\" + JSON.stringify(data) + \"]\", data.id]);\n        } else {\n          var com = JSON.parse(row.comments);\n          com.push(data);\n          console.log(com);\n          db.run(\"UPDATE Posts SET comments=? WHERE id=?\", [JSON.stringify(com), data.id]);\n          console.log(data);\n        }\n      } else {\n        console.log(err);\n      }\n    });\n  }\n  res.send(\"hi\");\n});\n\napp.post(\"/post/vote/:wat\", (req, res) => {\n  var which = req.params.wat;\n  var id = req.body.id;\n  var user = req.cookies.user;\n  var select;\n  if (which == \"up\") {\n    select = 1;\n  } else {\n    select = -1;\n  }\n  if (req.cookies.user && allowWrite) {\n    db.get(\"SELECT * FROM Posts WHERE id=?\", [id], (err, row) => {\n      if (!err) {\n        if (which == \"up\") {\n          var opt = \"like\";\n          var add = \"+1\";\n        } else {\n          var opt = \"bad\";\n          var add = \"-1\";\n        }\n        db.get(\"SELECT like FROM Users\", (err, like) => {\n          db.get(\"SELECT bad FROM Users\", (err, bad) => {\n            if (!err) {\n              var out;\n              if (opt == \"like\") {\n                out = JSON.parse(like.like);\n              } else {\n                out = JSON.parse(bad.bad);\n              }\n              if (out == null) {\n                let tmp = [];\n                tmp.push(id);\n                tmp = JSON.stringify(tmp);\n                db.run(`UPDATE Users SET ${opt}=? WHERE username=?`, [tmp, user], err => {\n                  if (err) {\n                    res.send({ error: true });\n                  }\n                });\n                db.run(`UPDATE Posts SET votes=0${add} WHERE id=?`, [id], err => {\n                  if (err) {\n                    res.send({ error: true });\n                  }\n                });\n              } else {\n                var tmp = out;\n                if (out.indexOf(id) == -1) {\n                  tmp.push(id);\n                  db.run(`UPDATE Posts SET votes=votes${add} WHERE id=?`, [id], err => {\n                    if (err) {\n                      res.send({ error: true });\n                    }\n                  });\n                } else {\n                  select = 0;\n                  tmp.splice(tmp.indexOf(id), 1);\n                  if (add == \"+1\") {\n                    add = \"-1\";\n                  } else {\n                    add = \"+1\";\n                  }\n                  db.run(`UPDATE Posts SET votes=votes${add} WHERE id=?`, [id], err => {\n                    if (err) {\n                      res.send({ error: true });\n                    }\n                  });\n                }\n                tmp = JSON.stringify(tmp);\n                db.run(`UPDATE Users SET ${opt}=? WHERE username=?`, [tmp, user], err => {\n                  if (err) {\n                    res.send({ error: true });\n                  }\n                });\n              }\n              if (opt == \"like\") {\n                if (bad.bad != null) {\n                  var tmp = JSON.parse(bad.bad);\n                  if (tmp.indexOf(id) != -1) {\n                    db.run(`UPDATE Users SET bad=? WHERE username=?`, [tmp.splice(tmp, 1), user], err => {\n                      if (err) {\n                        res.send({ error: true });\n                      }\n                    });\n                  }\n                }\n              } else {\n                if (like.like != null) {\n                  var tmp = JSON.parse(like.like);\n                  if (tmp.indexOf(id) != -1) {\n                    db.run(`UPDATE Users SET like=? WHERE username=?`, [tmp.splice(tmp, 1), user], err => {\n                      if (err) {\n                        res.send({ error: true });\n                      }\n                    });\n                  }\n                }\n              }\n              db.get(\"SELECT votes FROM Posts WHERE id=?\", [id], (err, row) => {\n                if (!err) {\n                  res.send({ error: false, votes: row.votes, select: select });\n                } else {\n                  res.send({ error: true });\n                }\n              });\n            } else {\n              res.send({ error: true });\n            }\n          });\n        });\n      } else {\n        res.send({ error: true });\n      }\n    });\n  }\n});\n\napp.post(\"/user/addUser\", (req, res) => {\n  console.log(`add to new user ${req.body}`);\n  if (allowWrite) {\n    const user = cleanseString(req.body.username);\n    const pass = req.body.password;\n    const joined = new Date();\n    console.log(\"Add user: \" + user + \"@\" + pass);\n    db.get(`SELECT username FROM Users WHERE username=?`, [user], (error, row) => {\n      console.log(row);\n      if (!row) {\n        db.run(`INSERT INTO Users (username, password, joined) VALUES (?,?, ?)`, [user, pass, joined], error => {\n          if (error) {\n            console.log(\"error!\");\n            res.send({\n              message: \"Something happened, please try again\",\n              error: true\n            });\n          } else {\n            console.log(\"success\");\n            res.cookie(\"user\", user, { maxAge: 1800000 }).send({ message: \"success\", error: false });\n          }\n        });\n      } else {\n        console.log(\"User already exists!\");\n        res.send({ message: \"User already exists!\", error: true });\n      }\n    });\n  }\n});\n\napp.post(\"/user/login\", (req, res) => {\n  const user = cleanseString(req.body.username);\n  const pass = cleanseString(req.body.password);\n  console.log(\"Login user: \" + user + \"@\" + pass);\n  db.get(`SELECT username FROM Users WHERE username=?`, [user], (error, row) => {\n    if (row) {\n      db.get(`SELECT password FROM Users WHERE username=?`, [user], (err, row) => {\n        if (err) {\n          console.log(\"error!\");\n          res.send({\n            message: \"Something happened, please try again\",\n            error: true\n          });\n        } else {\n          if (row.password == pass) {\n            console.log(\"success\");\n            res.cookie(\"user\", user, { maxAge: 600000 }).send({ message: \"success\", error: false });\n          } else {\n            console.log(\"incorrect password\");\n            res.send({ message: \"Incorrect password\", error: true });\n          }\n        }\n      });\n    } else {\n      console.log(\"user does not exist\");\n      res.send({ message: \"User does not exist\", error: true });\n    }\n  });\n});\n\napp.post(\"/user/deleteUser\", (req, res) => {\n  if (allowWrite) {\n    const user = req.cookies.user;\n    console.log(\"Delete user: \" + user);\n    if (user) {\n      db.get(`SELECT username FROM Users WHERE username=?`, [user], (error, row) => {\n        if (row) {\n          db.run(`DELETE FROM Users WHERE username=?`, [user], err => {\n            if (err) {\n              console.log(\"error!\");\n              res.send({\n                message: \"Something happened, please try again\",\n                error: true\n              });\n            } else {\n              console.log(\"success\");\n              res.send({ message: \"success\", error: false });\n            }\n          });\n        } else {\n          console.log(\"user does not exist\");\n          res.send({ message: \"User does not exist\", error: true });\n        }\n      });\n    } else {\n      console.log(\"no signed in user\");\n      res.send({ message: \"No signed in user\", error: true });\n    }\n  }\n});\n\napp.post(\"/user/updatePass\", (req, res) => {\n  if (allowWrite) {\n    const user = req.cookies.user;\n    const oldpass = req.body.oldpass;\n    const newpass = req.body.newpass;\n    console.log(\"Update user password: \" + user + \" to \" + newpass);\n    if (user) {\n      db.get(`SELECT username FROM Users WHERE username=?`, [user], (error, row) => {\n        if (row) {\n          db.get(`SELECT password FROM Users WHERE username=?`, [user], (error, row) => {\n            if (row.password == oldpass) {\n              db.run(`UPDATE Users SET password=? WHERE username=?`, [newpass, user], err => {\n                if (err) {\n                  console.log(\"error!\");\n                  res.send({\n                    message: \"Something happened, please try again\",\n                    error: true\n                  });\n                } else {\n                  console.log(\"success\");\n                  res.send({ message: \"success\", error: false });\n                }\n              });\n            } else {\n              res.send({\n                message: \"Incorrect password\",\n                error: true\n              });\n            }\n          });\n        } else {\n          console.log(\"user does not exist\");\n          res.send({ message: \"User does not exist\", error: true });\n        }\n      });\n    } else {\n      console.log(\"no signed in user\");\n      res.send({ message: \"No signed in user\", error: true });\n    }\n  }\n});\n\napp.post(\"/user/updateStatus\", (req, res) => {\n  if (allowWrite) {\n    const user = req.cookies.user;\n    // const status = cleanseString(req.body.status);\n    const status = req.body.status;\n    console.log(\"Update user status: \" + user + \" to \" + status);\n    if (user) {\n      db.get(`SELECT username FROM Users WHERE username=?`, [user], (error, row) => {\n        if (row) {\n          db.run(`UPDATE Users SET status=? WHERE username=?`, [status, user], err => {\n            if (err) {\n              console.log(\"error!\");\n              res.send({\n                message: \"Something happened, please try again\",\n                error: true\n              });\n            } else {\n              console.log(\"success\");\n              res.send({ message: \"success\", error: false });\n            }\n          });\n        } else {\n          console.log(\"user does not exist\");\n          res.send({ message: \"User does not exist\", error: true });\n        }\n      });\n    } else {\n      console.log(\"no signed in user\");\n      res.send({ message: \"No signed in user\", error: true });\n    }\n  }\n});\n\napp.get(\"/reset\", (req, res) => {\n  if (allowReset) {\n    db.serialize(() => {\n      db.run(\"DROP TABLE IF EXISTS Users\");\n      db.run(\"DROP TABLE IF EXISTS Posts\");\n      db.run(\"CREATE TABLE Users (id INTEGER PRIMARY KEY AUTOINCREMENT, username TEXT, password Text, joined TEXT, status TEXT, like TEXT, bad TEXT, profilepic BLOB)\");\n      db.run(\"CREATE TABLE Posts (id INTEGER PRIMARY KEY AUTOINCREMENT, title TEXT, post Text, by TEXT, date TEXT, tag TEXT, votes INTEGER, comments TEXT)\");\n      db.run(\"CREATE TABLE Sessions (id INTEGER PRIMARY KEY AUTOINCREMENT, key TEXT expires TEXT)\");\n\n      console.log(\"RESET!\");\n    });\n  }\n});\n\n// helper function that prevents html/css/script malice\nconst cleanseString = function (string) {\n  return string.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\");\n};\n\napp.use(function (req, res) {\n  res.status(404).sendFile(`${__dirname}/views/404.html`);\n});\n\n// listen for requests :)\nvar listener = app.listen(process.env.PORT, () => {\n  console.log(`Your app is listening on port ${listener.address().port}`);\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "ast": null,
    "map": {
      "version": 3,
      "sources": [
        "server.js"
      ],
      "names": [
        "express",
        "require",
        "bodyParser",
        "Cookies",
        "favicon",
        "app",
        "fs",
        "use",
        "urlencoded",
        "extended",
        "json",
        "allowWrite",
        "allowReset",
        "static",
        "__dirname",
        "dbFile",
        "exists",
        "existsSync",
        "sqlite3",
        "verbose",
        "db",
        "Database",
        "serialize",
        "run",
        "console",
        "log",
        "get",
        "req",
        "res",
        "sendFile",
        "data",
        "cookies",
        "user",
        "err",
        "row",
        "status",
        "like",
        "bad",
        "send",
        "clearCookie",
        "message",
        "params",
        "joined",
        "all",
        "limit",
        "query",
        "offset",
        "sub",
        "id",
        "post",
        "body",
        "title",
        "posted",
        "tag",
        "date",
        "Date",
        "by",
        "error",
        "cookie",
        "maxAge",
        "comment",
        "comments",
        "JSON",
        "stringify",
        "com",
        "parse",
        "push",
        "which",
        "wat",
        "select",
        "opt",
        "add",
        "out",
        "tmp",
        "indexOf",
        "splice",
        "votes",
        "cleanseString",
        "username",
        "pass",
        "password",
        "oldpass",
        "newpass",
        "string",
        "replace",
        "listener",
        "listen",
        "process",
        "env",
        "PORT",
        "address",
        "port"
      ],
      "mappings": "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",
      "file": "server.js",
      "sourceRoot": "/app",
      "sourcesContent": [
        "// server.js\n// where your node app starts\n\n// init project\nconst express = require(\"express\");\nconst bodyParser = require(\"body-parser\");\nconst Cookies = require(\"cookie-parser\");\nconst favicon = require(\"express-favicon\");\nconst app = express();\nconst fs = require(\"fs\");\napp.use(bodyParser.urlencoded({ extended: true }));\napp.use(bodyParser.json());\n\nconst allowWrite = true;\nconst allowReset = false;\n\n// we've started you off with Express,\n// but feel free to use whatever libs or frameworks you'd like through `package.json`.\n\n// http://expressjs.com/en/starter/static-files.html\napp.use(express.static(\"public\"));\napp.use(favicon(`${__dirname}/public/favicon.ico`));\napp.use(Cookies());\n\n// init sqlite db\nconst dbFile = \"./.data/sqlite.db\";\nconst exists = fs.existsSync(dbFile);\nconst sqlite3 = require(\"sqlite3\").verbose();\nconst db = new sqlite3.Database(dbFile);\n\n// if ./.data/sqlite.db does not exist, create it, otherwise print records to console\ndb.serialize(() => {\n  if (!exists) {\n    db.run(\"DROP TABLE IF EXISTS Users\");\n    db.run(\"DROP TABLE IF EXISTS Posts\");\n    db.run(\n      \"CREATE TABLE Users (id INTEGER PRIMARY KEY AUTOINCREMENT, username TEXT, password Text, joined TEXT, status TEXT, like TEXT, bad TEXT, profilepic BLOB)\"\n    );\n    db.run(\n      \"CREATE TABLE Posts (id INTEGER PRIMARY KEY AUTOINCREMENT, title TEXT, post Text, by TEXT, date TEXT, tag TEXT, votes INTEGER, comments TEXT)\"\n    );\n    db.run(\n      \"CREATE TABLE Sessions (id INTEGER PRIMARY KEY AUTOINCREMENT, key TEXT expires TEXT)\"\n    );\n    console.log(\"it is done\");\n  }\n});\n\n// http://expressjs.com/en/starter/basic-routing.html\napp.get(\"/\", (req, res) => {\n  res.sendFile(`${__dirname}/views/index.html`);\n});\n\n// http://expressjs.com/en/starter/basic-routing.html\napp.get(\"/test\", (req, res) => {\n  db.run(\"ALTER TABLE Users ADD profilepic BLOB\");\n  res.sendFile(`${__dirname}/views/test.html`);\n});\n\napp.get(\"/signup\", (req, res) => {\n  res.sendFile(`${__dirname}/views/signup.html`);\n});\n\n// http://expressjs.com/en/starter/basic-routing.html\napp.get(\"/login\", (req, res) => {\n  res.sendFile(`${__dirname}/views/login.html`);\n});\n\napp.get(\"/edit\", (req, res) => {\n  res.sendFile(`${__dirname}/views/edit.html`);\n});\n\napp.get(\"/t/card\", (req, res) => {\n  res.sendFile(`${__dirname}/templates/card.html`);\n});\n\napp.get(\"/t/comment\", (req, res) => {\n  res.sendFile(`${__dirname}/templates/comment.html`);\n});\n\napp.get(\"/user\", (req, res) => {\n  var data = req.cookies;\n  if (data.user) {\n    db.get(\n      \"SELECT status, joined, like, bad FROM Users WHERE username=?\",\n      [data.user],\n      (err, row) => {\n        if (!err) {\n          if (row) {\n            data.status = row.status;\n            data.like = row.like;\n            data.bad = row.bad;\n          }\n          if (data.like == null) {\n            data.like = \"[]\";\n          }\n          if (data.bad == null) {\n            data.bad = \"[]\";\n          }\n          res.send(data);\n        }\n      }\n    );\n  } else res.send({});\n});\n\napp.get(\"/logout\", (req, res) => {\n  res.clearCookie(\"user\").send({ message: \"success\" });\n});\n\napp.get(\"/post\", (req, res) => {\n  res.sendFile(`${__dirname}/views/new.html`);\n});\n\napp.get(\"/@:user\", (req, res) => {\n  res.sendFile(`${__dirname}/views/user.html`);\n});\n\napp.get(\"/~:sub\", (req, res) => {\n  res.sendFile(`${__dirname}/views/sub.html`);\n});\n\napp.get(\"/-:post\", (req, res) => {\n  res.sendFile(`${__dirname}/views/post.html`);\n});\n\napp.get(\"/get/users/:user\", (req, res) => {\n  var data = {};\n  data.user = req.params.user;\n  db.get(\n    \"SELECT status, joined FROM Users WHERE username=?\",\n    [data.user],\n    (err, row) => {\n      if (!err) {\n        if (row) {\n          data.status = row.status;\n          data.joined = row.joined;\n        }\n        res.send(data);\n      }\n    }\n  );\n});\n\napp.get(\"/get/users/\", (req, res) => {\n  db.all(\"SELECT username, status, joined FROM Users\", [], (err, row) => {\n    if (!err) {\n      if (row) {\n        res.send(row);\n      }\n    }\n  });\n});\n\napp.get(\"/get/posts/:sub\", (req, res) => {\n  var limit = req.query.limit;\n  var offset = req.query.offset;\n  var user = req.query.user;\n  if (!limit) {\n    limit = 10;\n  }\n  if (!offset) {\n    offset = 0;\n  }\n  if (!user) {\n    user = \"%\";\n  }\n  var data = {};\n  data.sub = req.params.sub;\n  db.all(\n    \"SELECT * FROM Posts WHERE (tag=? AND by LIKE ?) ORDER BY id DESC LIMIT ? OFFSET ?\",\n    [data.sub, user, limit, offset],\n    (err, row) => {\n      if (!err) {\n        if (row) {\n          res.send(row);\n        }\n      }\n    }\n  );\n});\n\napp.get(\"/get/posts/\", (req, res) => {\n  var limit = req.query.limit;\n  var offset = req.query.offset;\n  var user = req.query.user;\n  if (!limit) {\n    limit = 10;\n  }\n  if (!offset) {\n    offset = 0;\n  }\n  if (!user) {\n    user = \"%\";\n  }\n  db.all(\n    \"SELECT * FROM Posts WHERE (by LIKE ?) ORDER BY id DESC LIMIT ? OFFSET ?\",\n    [user, limit, offset],\n    (err, row) => {\n      if (!err) {\n        res.send(row);\n      }\n    }\n  );\n});\napp.get(\"/get/post/:id\", (req, res) => {\n  db.get(\"SELECT * FROM Posts WHERE id=?\", [req.params.id], (err, row) => {\n    if (!err) {\n      res.send(row);\n    }\n  });\n});\n\napp.post(\"/post/submitPost\", (req, res) => {\n  console.log(`Submit new post ${req.body.title}`);\n  if (allowWrite) {\n    if (!req.cookies.posted) {\n      const title = req.body.title;\n      const post = req.body.post;\n      const tag = req.body.tag;\n      const date = new Date();\n      const by = req.cookies.user;\n      if (by) {\n        db.run(\n          `INSERT INTO Posts (title, post, by, date, tag) VALUES (?,?,?,?,?)`,\n          [title, post, by, date, tag],\n          err => {\n            if (err) {\n              console.log(err);\n              console.log(\"error!\");\n              res.send({\n                message: \"Something happened, please try again\",\n                error: true\n              });\n            } else {\n              console.log(\"success\");\n              res\n                .cookie(\"posted\", true, { maxAge: 60000 })\n                .send({ message: \"success\", error: false });\n            }\n          }\n        );\n      } else {\n        res.send({ message: \"No user!\", error: true });\n      }\n    } else {\n      res.send({ message: \"Too many posts!\", error: true });\n    }\n  }\n});\n\napp.post(\"/post/comment\", (req, res) => {\n  var data = {\n    comment: req.body.comment,\n    id: req.body.id,\n    by: req.cookies.user,\n    date: new Date()\n  };\n  if (req.cookies.user && allowWrite) {\n    db.get(\"SELECT (comments) FROM Posts WHERE id=?\", [data.id], (err, row) => {\n      if (!err) {\n        console.log(row);\n        if (row.comments == null) {\n          console.log(\"first\");\n          db.run(\"UPDATE Posts SET comments=? WHERE id=?\", [\n            \"[\" + JSON.stringify(data) + \"]\",\n            data.id\n          ]);\n        } else {\n          var com = JSON.parse(row.comments);\n          com.push(data);\n          console.log(com);\n          db.run(\"UPDATE Posts SET comments=? WHERE id=?\", [\n            JSON.stringify(com),\n            data.id\n          ]);\n          console.log(data);\n        }\n      } else {\n        console.log(err);\n      }\n    });\n  }\n  res.send(\"hi\");\n});\n\napp.post(\"/post/vote/:wat\", (req, res) => {\n  var which = req.params.wat;\n  var id = req.body.id;\n  var user = req.cookies.user;\n  var select;\n  if (which == \"up\") {\n    select = 1;\n  } else {\n    select = -1;\n  }\n  if (req.cookies.user && allowWrite) {\n    db.get(\"SELECT * FROM Posts WHERE id=?\", [id], (err, row) => {\n      if (!err) {\n        if (which == \"up\") {\n          var opt = \"like\";\n          var add = \"+1\";\n        } else {\n          var opt = \"bad\";\n          var add = \"-1\";\n        }\n        db.get(\"SELECT like FROM Users\", (err, like) => {\n          db.get(\"SELECT bad FROM Users\", (err, bad) => {\n            if (!err) {\n              var out;\n              if (opt == \"like\") {\n                out = JSON.parse(like.like);\n              } else {\n                out = JSON.parse(bad.bad);\n              }\n              if (out == null) {\n                let tmp = [];\n                tmp.push(id);\n                tmp = JSON.stringify(tmp);\n                db.run(\n                  `UPDATE Users SET ${opt}=? WHERE username=?`,\n                  [tmp, user],\n                  err => {\n                    if (err) {\n                      res.send({ error: true });\n                    }\n                  }\n                );\n                db.run(\n                  `UPDATE Posts SET votes=0${add} WHERE id=?`,\n                  [id],\n                  err => {\n                    if (err) {\n                      res.send({ error: true });\n                    }\n                  }\n                );\n              } else {\n                var tmp = out;\n                if (out.indexOf(id) == -1) {\n                  tmp.push(id);\n                  db.run(\n                    `UPDATE Posts SET votes=votes${add} WHERE id=?`,\n                    [id],\n                    err => {\n                      if (err) {\n                        res.send({ error: true });\n                      }\n                    }\n                  );\n                } else {\n                  select = 0;\n                  tmp.splice(tmp.indexOf(id), 1);\n                  if (add == \"+1\") {\n                    add = \"-1\";\n                  } else {\n                    add = \"+1\";\n                  }\n                  db.run(\n                    `UPDATE Posts SET votes=votes${add} WHERE id=?`,\n                    [id],\n                    err => {\n                      if (err) {\n                        res.send({ error: true });\n                      }\n                    }\n                  );\n                }\n                tmp = JSON.stringify(tmp);\n                db.run(\n                  `UPDATE Users SET ${opt}=? WHERE username=?`,\n                  [tmp, user],\n                  err => {\n                    if (err) {\n                      res.send({ error: true });\n                    }\n                  }\n                );\n              }\n              if (opt == \"like\") {\n                if (bad.bad != null) {\n                  var tmp = JSON.parse(bad.bad);\n                  if (tmp.indexOf(id) != -1) {\n                    db.run(\n                      `UPDATE Users SET bad=? WHERE username=?`,\n                      [tmp.splice(tmp, 1), user],\n                      err => {\n                        if (err) {\n                          res.send({ error: true });\n                        }\n                      }\n                    );\n                  }\n                }\n              } else {\n                if (like.like != null) {\n                  var tmp = JSON.parse(like.like);\n                  if (tmp.indexOf(id) != -1) {\n                    db.run(\n                      `UPDATE Users SET like=? WHERE username=?`,\n                      [tmp.splice(tmp, 1), user],\n                      err => {\n                        if (err) {\n                          res.send({ error: true });\n                        }\n                      }\n                    );\n                  }\n                }\n              }\n              db.get(\"SELECT votes FROM Posts WHERE id=?\", [id], (err, row) => {\n                if (!err) {\n                  res.send({ error: false, votes: row.votes, select: select });\n                } else {\n                  res.send({ error: true });\n                }\n              });\n            } else {\n              res.send({ error: true });\n            }\n          });\n        });\n      } else {\n        res.send({ error: true });\n      }\n    });\n  }\n});\n\napp.post(\"/user/addUser\", (req, res) => {\n  console.log(`add to new user ${req.body}`);\n  if (allowWrite) {\n    const user = cleanseString(req.body.username);\n    const pass = req.body.password;\n    const joined = new Date();\n    console.log(\"Add user: \" + user + \"@\" + pass);\n    db.get(\n      `SELECT username FROM Users WHERE username=?`,\n      [user],\n      (error, row) => {\n        console.log(row);\n        if (!row) {\n          db.run(\n            `INSERT INTO Users (username, password, joined) VALUES (?,?, ?)`,\n            [user, pass, joined],\n            error => {\n              if (error) {\n                console.log(\"error!\");\n                res.send({\n                  message: \"Something happened, please try again\",\n                  error: true\n                });\n              } else {\n                console.log(\"success\");\n                res\n                  .cookie(\"user\", user, { maxAge: 1800000 })\n                  .send({ message: \"success\", error: false });\n              }\n            }\n          );\n        } else {\n          console.log(\"User already exists!\");\n          res.send({ message: \"User already exists!\", error: true });\n        }\n      }\n    );\n  }\n});\n\napp.post(\"/user/login\", (req, res) => {\n  const user = cleanseString(req.body.username);\n  const pass = cleanseString(req.body.password);\n  console.log(\"Login user: \" + user + \"@\" + pass);\n  db.get(\n    `SELECT username FROM Users WHERE username=?`,\n    [user],\n    (error, row) => {\n      if (row) {\n        db.get(\n          `SELECT password FROM Users WHERE username=?`,\n          [user],\n          (err, row) => {\n            if (err) {\n              console.log(\"error!\");\n              res.send({\n                message: \"Something happened, please try again\",\n                error: true\n              });\n            } else {\n              if (row.password == pass) {\n                console.log(\"success\");\n                res\n                  .cookie(\"user\", user, { maxAge: 600000 })\n                  .send({ message: \"success\", error: false });\n              } else {\n                console.log(\"incorrect password\");\n                res.send({ message: \"Incorrect password\", error: true });\n              }\n            }\n          }\n        );\n      } else {\n        console.log(\"user does not exist\");\n        res.send({ message: \"User does not exist\", error: true });\n      }\n    }\n  );\n});\n\napp.post(\"/user/deleteUser\", (req, res) => {\n  if (allowWrite) {\n    const user = req.cookies.user;\n    console.log(\"Delete user: \" + user);\n    if (user) {\n      db.get(\n        `SELECT username FROM Users WHERE username=?`,\n        [user],\n        (error, row) => {\n          if (row) {\n            db.run(`DELETE FROM Users WHERE username=?`, [user], err => {\n              if (err) {\n                console.log(\"error!\");\n                res.send({\n                  message: \"Something happened, please try again\",\n                  error: true\n                });\n              } else {\n                console.log(\"success\");\n                res.send({ message: \"success\", error: false });\n              }\n            });\n          } else {\n            console.log(\"user does not exist\");\n            res.send({ message: \"User does not exist\", error: true });\n          }\n        }\n      );\n    } else {\n      console.log(\"no signed in user\");\n      res.send({ message: \"No signed in user\", error: true });\n    }\n  }\n});\n\napp.post(\"/user/updatePass\", (req, res) => {\n  if (allowWrite) {\n    const user = req.cookies.user;\n    const oldpass = req.body.oldpass;\n    const newpass = req.body.newpass;\n    console.log(\"Update user password: \" + user + \" to \" + newpass);\n    if (user) {\n      db.get(\n        `SELECT username FROM Users WHERE username=?`,\n        [user],\n        (error, row) => {\n          if (row) {\n            db.get(\n              `SELECT password FROM Users WHERE username=?`,\n              [user],\n              (error, row) => {\n                if (row.password == oldpass) {\n                  db.run(\n                    `UPDATE Users SET password=? WHERE username=?`,\n                    [newpass, user],\n                    err => {\n                      if (err) {\n                        console.log(\"error!\");\n                        res.send({\n                          message: \"Something happened, please try again\",\n                          error: true\n                        });\n                      } else {\n                        console.log(\"success\");\n                        res.send({ message: \"success\", error: false });\n                      }\n                    }\n                  );\n                } else {\n                  res.send({\n                    message: \"Incorrect password\",\n                    error: true\n                  });\n                }\n              }\n            );\n          } else {\n            console.log(\"user does not exist\");\n            res.send({ message: \"User does not exist\", error: true });\n          }\n        }\n      );\n    } else {\n      console.log(\"no signed in user\");\n      res.send({ message: \"No signed in user\", error: true });\n    }\n  }\n});\n\napp.post(\"/user/updateStatus\", (req, res) => {\n  if (allowWrite) {\n    const user = req.cookies.user;\n    // const status = cleanseString(req.body.status);\n    const status = req.body.status;\n    console.log(\"Update user status: \" + user + \" to \" + status);\n    if (user) {\n      db.get(\n        `SELECT username FROM Users WHERE username=?`,\n        [user],\n        (error, row) => {\n          if (row) {\n            db.run(\n              `UPDATE Users SET status=? WHERE username=?`,\n              [status, user],\n              err => {\n                if (err) {\n                  console.log(\"error!\");\n                  res.send({\n                    message: \"Something happened, please try again\",\n                    error: true\n                  });\n                } else {\n                  console.log(\"success\");\n                  res.send({ message: \"success\", error: false });\n                }\n              }\n            );\n          } else {\n            console.log(\"user does not exist\");\n            res.send({ message: \"User does not exist\", error: true });\n          }\n        }\n      );\n    } else {\n      console.log(\"no signed in user\");\n      res.send({ message: \"No signed in user\", error: true });\n    }\n  }\n});\n\napp.get(\"/reset\", (req, res) => {\n  if (allowReset) {\n    db.serialize(() => {\n      db.run(\"DROP TABLE IF EXISTS Users\");\n      db.run(\"DROP TABLE IF EXISTS Posts\");\n      db.run(\n        \"CREATE TABLE Users (id INTEGER PRIMARY KEY AUTOINCREMENT, username TEXT, password Text, joined TEXT, status TEXT, like TEXT, bad TEXT, profilepic BLOB)\"\n      );\n      db.run(\n        \"CREATE TABLE Posts (id INTEGER PRIMARY KEY AUTOINCREMENT, title TEXT, post Text, by TEXT, date TEXT, tag TEXT, votes INTEGER, comments TEXT)\"\n      );\n      db.run(\n        \"CREATE TABLE Sessions (id INTEGER PRIMARY KEY AUTOINCREMENT, key TEXT expires TEXT)\"\n      );\n\n      console.log(\"RESET!\");\n    });\n  }\n});\n\n// helper function that prevents html/css/script malice\nconst cleanseString = function(string) {\n  return string\n    .replace(/&/g, \"&amp;\")\n    .replace(/</g, \"&lt;\")\n    .replace(/>/g, \"&gt;\");\n};\n\napp.use(function(req, res) {\n  res.status(404).sendFile(`${__dirname}/views/404.html`);\n});\n\n// listen for requests :)\nvar listener = app.listen(process.env.PORT, () => {\n  console.log(`Your app is listening on port ${listener.address().port}`);\n});\n"
      ]
    },
    "mtime": 1581817215000
  }
}